{"version":3,"sources":["webpack:///./resources/assets/js/dashboard/dashboard.js"],"names":["$","document","ready","timeRange","today","moment","start","clone","startOf","end","endOf","window","on","loadIncomeExpenseReport","format","ev","picker","startDate","endDate","cb","find","html","lastMonth","subtract","thisMonthStart","thisMonthEnd","daterangepicker","opens","showDropdowns","autoUpdateInput","ranges","ajax","type","url","incomeExpenseReportUrl","dataType","data","start_date","end_date","cache","done","prepareReport","result","incomeTotal","expenseTotal","each","this","append","barChartData","labels","date","datasets","label","backgroundColor","ctx","getElementById","getContext","canvas","style","height","width","myBar","Chart","options","title","display","text","income_and_expense_reports","tooltips","enabled","mode","callbacks","tooltipItem","datasetIndex","datasetLabel","index","addCommas","elements","rectangle","borderWidth","borderColor","responsive","scales","xAxes","ticks","autoSkip","yAxes","callback","scaleLabel","labelString","currentCurrencyName"],"mappings":"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","file":"/assets/js/dashboard/dashboard.js","sourcesContent":["$(document).ready(function () {\n    'use strict';\n\n    let timeRange = $('#time_range');\n    const today = moment();\n    let start = today.clone().startOf('week');\n    let end = today.clone().endOf('week');\n    let isPickerApply = false;\n    $(window).on('load', function () {\n        loadIncomeExpenseReport(start.format('YYYY-MM-D  H:mm:ss'),\n            end.format('YYYY-MM-D  H:mm:ss'));\n    });\n\n    timeRange.on('apply.daterangepicker', function (ev, picker) {\n        isPickerApply = true;\n        start = picker.startDate.format('YYYY-MM-D  H:mm:ss');\n        end = picker.endDate.format('YYYY-MM-D  H:mm:ss');\n        loadIncomeExpenseReport(start, end);\n    });\n\n    window.cb = function (start, end) {\n        timeRange.find('span').\n            html(\n                start.format('MMM D, YYYY') + ' - ' +\n                end.format('MMM D, YYYY'));\n    };\n\n    cb(start, end);\n\n    const lastMonth = moment().startOf('month').subtract(1, 'days');\n    const thisMonthStart = moment().startOf('month');\n    const thisMonthEnd = moment().endOf('month');\n\n    timeRange.daterangepicker({\n        startDate: start,\n        endDate: end,\n        opens: 'left',\n        showDropdowns: true,\n        autoUpdateInput: false,\n        ranges: {\n            'Today': [moment(), moment()],\n            'This Week': [moment().startOf('week'), moment().endOf('week')],\n            'Last Week': [\n                moment().startOf('week').subtract(7, 'days'),\n                moment().startOf('week').subtract(1, 'days')],\n            'This Month': [thisMonthStart, thisMonthEnd],\n            'Last Month': [\n                lastMonth.clone().startOf('month'),\n                lastMonth.clone().endOf('month')],\n        },\n    }, cb);\n\n    window.loadIncomeExpenseReport = function (startDate, endDate) {\n        $.ajax({\n            type: 'GET',\n            url: incomeExpenseReportUrl,\n            dataType: 'json',\n            data: {\n                start_date: startDate,\n                end_date: endDate,\n            },\n            cache: false,\n        }).done(prepareReport);\n    };\n\n    window.prepareReport = function (result) {\n        $('#daily-work-report').html('');\n        let data = result.data;\n        let incomeTotal = 0;\n        let expenseTotal = 0;\n        $.each(result.data.incomeTotal, function () {\n            incomeTotal += this;\n        });\n        $.each(result.data.expenseTotal, function () {\n            expenseTotal += this;\n        });\n        if (expenseTotal === 0 && incomeTotal === 0) {\n            $('#income-expense-report-container').html('');\n            $('#income-expense-report-container').append(\n                '<div align=\"center\" class=\"no-record\">No Records Found</div>');\n            return true;\n        } else {\n            $('#income-expense-report-container').html('');\n            $('#income-expense-report-container').append('<canvas id=\"daily-work-report\"></canvas>');\n        }\n\n        let barChartData = {\n            labels: data.date,\n            datasets: [\n                {\n                    label: 'Total Income',\n                    backgroundColor: 'rgba(0,255,0,0.6)',\n                    data: data.incomeTotal,\n                },\n                {\n                    label: 'Total Expense',\n                    backgroundColor: 'rgba(255,0,0,0.6)',\n                    data: data.expenseTotal,\n                },\n            ],\n        };\n        let ctx = document.getElementById('daily-work-report').getContext('2d');\n        ctx.canvas.style.height = '400px';\n        ctx.canvas.style.width = '100%';\n        window.myBar = new Chart(ctx, {\n            type: 'bar',\n            data: barChartData,\n            options: {\n                title: {\n                    display: true,\n                    text: income_and_expense_reports,\n                },\n                tooltips: {\n                    enabled: true,\n                    mode: 'single',\n                    callbacks: {\n                        label: function (tooltipItem, data) {\n                            var label = data.datasets[tooltipItem.datasetIndex].label;\n                            var datasetLabel = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n                            return label + ': ' + addCommas(datasetLabel);\n                        },\n                    },\n                },\n                elements: {\n                    rectangle: {\n                        borderWidth: 1,\n                        borderColor: 'rgb(0, 0, 0, 0.1)',\n                    },\n                },\n                responsive: false,\n                scales: {\n                    xAxes: [\n                        {\n                            ticks: {\n                                autoSkip: false,\n                            },\n                        },\n                    ],\n                    yAxes: [\n                        {\n                            ticks: {\n                                callback: function (label) {\n                                    return label / 1000 + 'k';\n                                },\n                            },\n                            scaleLabel: {\n                                display: true,\n                                labelString: 'Revenues (In ' +\n                                    currentCurrencyName + ')',\n                            },\n                        }],\n                },\n            },\n        });\n    };\n});\n"],"sourceRoot":""}